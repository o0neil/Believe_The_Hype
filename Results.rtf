{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf0 \expnd0\expndtw0\kerning0
snps 1\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.86\
[[602   0]\
 [101   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.90\
[[577  25]\
 [ 47  54]]\
########################################################\
LinearSVC(C=0.001, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.001\} 0.799390243902 [mean: 0.79939, std: 0.05104, params: \{'C': 0.001\}, mean: 0.79817, std: 0.04958, params: \{'C': 0.01\}, mean: 0.79817, std: 0.04958, params: \{'C': 0.1\}, mean: 0.79817, std: 0.04958, params: \{'C': 1.0\}, mean: 0.79817, std: 0.04958, params: \{'C': 10.0\}, mean: 0.79817, std: 0.04958, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.83\
Accuracy on test data:     0.85\
[[548  54]\
 [ 49  52]]\
########################################################\
snps 2\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[595   0]\
 [108   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.86\
[[560  35]\
 [ 64  44]]\
########################################################\
LinearSVC(C=0.01, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.01\} 0.796341463415 [mean: 0.79573, std: 0.05726, params: \{'C': 0.001\}, mean: 0.79634, std: 0.05800, params: \{'C': 0.01\}, mean: 0.79634, std: 0.05800, params: \{'C': 0.1\}, mean: 0.79634, std: 0.05800, params: \{'C': 1.0\}, mean: 0.79634, std: 0.05800, params: \{'C': 10.0\}, mean: 0.79634, std: 0.05800, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[595   0]\
 [108   0]]\
########################################################\
snps 3\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.84\
[[592   0]\
 [111   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.86\
[[557  35]\
 [ 62  49]]\
########################################################\
LinearSVC(C=0.001, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.001\} 0.806097560976 [mean: 0.80610, std: 0.06609, params: \{'C': 0.001\}, mean: 0.80488, std: 0.06607, params: \{'C': 0.01\}, mean: 0.80488, std: 0.06607, params: \{'C': 0.1\}, mean: 0.80488, std: 0.06607, params: \{'C': 1.0\}, mean: 0.80488, std: 0.06607, params: \{'C': 10.0\}, mean: 0.80488, std: 0.06607, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.84\
[[592   0]\
 [111   0]]\
########################################################\
snps 4\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[597   0]\
 [106   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.86\
[[557  40]\
 [ 58  48]]\
########################################################\
LinearSVC(C=0.01, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.01\} 0.818292682927 [mean: 0.81585, std: 0.05092, params: \{'C': 0.001\}, mean: 0.81829, std: 0.05347, params: \{'C': 0.01\}, mean: 0.81829, std: 0.05347, params: \{'C': 0.1\}, mean: 0.81829, std: 0.05347, params: \{'C': 1.0\}, mean: 0.81829, std: 0.05347, params: \{'C': 10.0\}, mean: 0.81829, std: 0.05347, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[597   0]\
 [106   0]]\
########################################################\
snps 5\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.86\
Accuracy on test data:     0.83\
[[585   0]\
 [118   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.85\
[[552  33]\
 [ 73  45]]\
########################################################\
LinearSVC(C=0.001, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.001\} 0.82256097561 [mean: 0.82256, std: 0.05687, params: \{'C': 0.001\}, mean: 0.81463, std: 0.05583, params: \{'C': 0.01\}, mean: 0.81463, std: 0.05583, params: \{'C': 0.1\}, mean: 0.81463, std: 0.05583, params: \{'C': 1.0\}, mean: 0.81463, std: 0.05583, params: \{'C': 10.0\}, mean: 0.81463, std: 0.05583, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.88\
Accuracy on test data:     0.83\
[[566  19]\
 [ 98  20]]\
########################################################\
snps 6\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[598   0]\
 [105   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.87\
[[573  25]\
 [ 68  37]]\
########################################################\
LinearSVC(C=0.001, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.001\} 0.782317073171 [mean: 0.78232, std: 0.06552, params: \{'C': 0.001\}, mean: 0.78110, std: 0.06824, params: \{'C': 0.01\}, mean: 0.78110, std: 0.06824, params: \{'C': 0.1\}, mean: 0.78110, std: 0.06824, params: \{'C': 1.0\}, mean: 0.78110, std: 0.06824, params: \{'C': 10.0\}, mean: 0.78110, std: 0.06824, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[598   0]\
 [105   0]]\
########################################################\
snps 7\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.84\
[[590   0]\
 [113   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.86\
[[559  31]\
 [ 65  48]]\
########################################################\
LinearSVC(C=0.01, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.01\} 0.816463414634 [mean: 0.81585, std: 0.04601, params: \{'C': 0.001\}, mean: 0.81646, std: 0.04828, params: \{'C': 0.01\}, mean: 0.81646, std: 0.04828, params: \{'C': 0.1\}, mean: 0.81646, std: 0.04828, params: \{'C': 1.0\}, mean: 0.81646, std: 0.04828, params: \{'C': 10.0\}, mean: 0.81646, std: 0.04828, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.84\
[[590   0]\
 [113   0]]\
########################################################\
snps 8\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.84\
Accuracy on test data:     0.87\
[[610   0]\
 [ 93   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.87\
[[580  30]\
 [ 61  32]]\
########################################################\
LinearSVC(C=0.001, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.001\} 0.796341463415 [mean: 0.79634, std: 0.05843, params: \{'C': 0.001\}, mean: 0.79390, std: 0.05730, params: \{'C': 0.01\}, mean: 0.79390, std: 0.05730, params: \{'C': 0.1\}, mean: 0.79390, std: 0.05730, params: \{'C': 1.0\}, mean: 0.79390, std: 0.05730, params: \{'C': 10.0\}, mean: 0.79390, std: 0.05730, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.84\
Accuracy on test data:     0.87\
[[610   0]\
 [ 93   0]]\
########################################################\
snps 9\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.86\
[[602   0]\
 [101   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.89\
[[571  31]\
 [ 48  53]]\
########################################################\
LinearSVC(C=0.01, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.01\} 0.795731707317 [mean: 0.79207, std: 0.05024, params: \{'C': 0.001\}, mean: 0.79573, std: 0.05006, params: \{'C': 0.01\}, mean: 0.79573, std: 0.05006, params: \{'C': 0.1\}, mean: 0.79573, std: 0.05006, params: \{'C': 1.0\}, mean: 0.79573, std: 0.05006, params: \{'C': 10.0\}, mean: 0.79573, std: 0.05006, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.86\
[[602   0]\
 [101   0]]\
########################################################\
snps 10\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[600   0]\
 [103   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.88\
[[569  31]\
 [ 56  47]]\
########################################################\
LinearSVC(C=0.001, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.001\} 0.790853658537 [mean: 0.79085, std: 0.05225, params: \{'C': 0.001\}, mean: 0.79024, std: 0.05004, params: \{'C': 0.01\}, mean: 0.79024, std: 0.05004, params: \{'C': 0.1\}, mean: 0.79024, std: 0.05004, params: \{'C': 1.0\}, mean: 0.79024, std: 0.05004, params: \{'C': 10.0\}, mean: 0.79024, std: 0.05004, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[600   0]\
 [103   0]]\
########################################################\
snps 11\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[600   0]\
 [103   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.87\
[[572  28]\
 [ 61  42]]\
########################################################\
LinearSVC(C=0.01, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.01\} 0.798780487805 [mean: 0.79451, std: 0.06507, params: \{'C': 0.001\}, mean: 0.79878, std: 0.06653, params: \{'C': 0.01\}, mean: 0.79878, std: 0.06653, params: \{'C': 0.1\}, mean: 0.79878, std: 0.06653, params: \{'C': 1.0\}, mean: 0.79878, std: 0.06653, params: \{'C': 10.0\}, mean: 0.79878, std: 0.06653, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[600   0]\
 [103   0]]\
########################################################\
snps 12\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[600   0]\
 [103   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.86\
[[555  45]\
 [ 53  50]]\
########################################################\
LinearSVC(C=0.01, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.01\} 0.810365853659 [mean: 0.80976, std: 0.05545, params: \{'C': 0.001\}, mean: 0.81037, std: 0.05662, params: \{'C': 0.01\}, mean: 0.81037, std: 0.05662, params: \{'C': 0.1\}, mean: 0.81037, std: 0.05662, params: \{'C': 1.0\}, mean: 0.81037, std: 0.05662, params: \{'C': 10.0\}, mean: 0.81037, std: 0.05662, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[600   0]\
 [103   0]]\
########################################################\
snps 13\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[596   0]\
 [107   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.87\
[[564  32]\
 [ 59  48]]\
########################################################\
LinearSVC(C=0.001, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.001\} 0.808536585366 [mean: 0.80854, std: 0.04830, params: \{'C': 0.001\}, mean: 0.80793, std: 0.05322, params: \{'C': 0.01\}, mean: 0.80793, std: 0.05322, params: \{'C': 0.1\}, mean: 0.80793, std: 0.05322, params: \{'C': 1.0\}, mean: 0.80793, std: 0.05322, params: \{'C': 10.0\}, mean: 0.80793, std: 0.05322, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[596   0]\
 [107   0]]\
########################################################\
snps 14\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.84\
Accuracy on test data:     0.88\
[[616   0]\
 [ 87   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.88\
[[585  31]\
 [ 54  33]]\
########################################################\
LinearSVC(C=0.001, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.001\} 0.776219512195 [mean: 0.77622, std: 0.06963, params: \{'C': 0.001\}, mean: 0.77073, std: 0.06534, params: \{'C': 0.01\}, mean: 0.77073, std: 0.06534, params: \{'C': 0.1\}, mean: 0.77073, std: 0.06534, params: \{'C': 1.0\}, mean: 0.77073, std: 0.06534, params: \{'C': 10.0\}, mean: 0.77073, std: 0.06534, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.84\
Accuracy on test data:     0.88\
[[616   0]\
 [ 87   0]]\
########################################################\
snps 15\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[599   0]\
 [104   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.86\
[[559  40]\
 [ 60  44]]\
########################################################\
LinearSVC(C=0.001, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.001\} 0.787804878049 [mean: 0.78780, std: 0.06997, params: \{'C': 0.001\}, mean: 0.78415, std: 0.06799, params: \{'C': 0.01\}, mean: 0.78415, std: 0.06799, params: \{'C': 0.1\}, mean: 0.78415, std: 0.06799, params: \{'C': 1.0\}, mean: 0.78415, std: 0.06799, params: \{'C': 10.0\}, mean: 0.78415, std: 0.06799, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[599   0]\
 [104   0]]\
########################################################\
snps 16\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.84\
[[589   0]\
 [114   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.86\
[[556  33]\
 [ 67  47]]\
########################################################\
LinearSVC(C=0.01, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.01\} 0.821341463415 [mean: 0.81890, std: 0.04598, params: \{'C': 0.001\}, mean: 0.82134, std: 0.05008, params: \{'C': 0.01\}, mean: 0.82134, std: 0.05008, params: \{'C': 0.1\}, mean: 0.82134, std: 0.05008, params: \{'C': 1.0\}, mean: 0.82134, std: 0.05008, params: \{'C': 10.0\}, mean: 0.82134, std: 0.05008, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.84\
[[589   0]\
 [114   0]]\
########################################################\
snps 17\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[599   0]\
 [104   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.89\
[[577  22]\
 [ 58  46]]\
########################################################\
LinearSVC(C=0.001, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.001\} 0.785365853659 [mean: 0.78537, std: 0.07928, params: \{'C': 0.001\}, mean: 0.78537, std: 0.08049, params: \{'C': 0.01\}, mean: 0.78537, std: 0.08049, params: \{'C': 0.1\}, mean: 0.78537, std: 0.08049, params: \{'C': 1.0\}, mean: 0.78537, std: 0.08049, params: \{'C': 10.0\}, mean: 0.78537, std: 0.08049, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[599   0]\
 [104   0]]\
########################################################\
snps 18\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.84\
Accuracy on test data:     0.87\
[[615   0]\
 [ 88   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.89\
[[588  27]\
 [ 49  39]]\
########################################################\
LinearSVC(C=0.01, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.01\} 0.765243902439 [mean: 0.76402, std: 0.05819, params: \{'C': 0.001\}, mean: 0.76524, std: 0.05911, params: \{'C': 0.01\}, mean: 0.76524, std: 0.05911, params: \{'C': 0.1\}, mean: 0.76524, std: 0.05911, params: \{'C': 1.0\}, mean: 0.76524, std: 0.05911, params: \{'C': 10.0\}, mean: 0.76524, std: 0.05911, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.84\
Accuracy on test data:     0.87\
[[615   0]\
 [ 88   0]]\
########################################################\
snps 19\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[595   0]\
 [108   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.86\
[[557  38]\
 [ 62  46]]\
########################################################\
LinearSVC(C=0.01, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.01\} 0.786585365854 [mean: 0.78476, std: 0.07214, params: \{'C': 0.001\}, mean: 0.78659, std: 0.07204, params: \{'C': 0.01\}, mean: 0.78659, std: 0.07204, params: \{'C': 0.1\}, mean: 0.78659, std: 0.07204, params: \{'C': 1.0\}, mean: 0.78659, std: 0.07204, params: \{'C': 10.0\}, mean: 0.78659, std: 0.07204, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.85\
Accuracy on test data:     0.85\
[[595   0]\
 [108   0]]\
########################################################\
snps 20\
using mask\
############# based on standard predict ################\
Accuracy on training data: 0.84\
Accuracy on test data:     0.87\
[[609   0]\
 [ 94   0]]\
########################################################\
using mask\
############# based on standard predict ################\
Accuracy on training data: 1.00\
Accuracy on test data:     0.88\
[[575  34]\
 [ 47  47]]\
########################################################\
LinearSVC(C=0.001, class_weight=None, dual=True, fit_intercept=True,\
     intercept_scaling=1, loss='hinge', max_iter=1000, multi_class='ovr',\
     penalty='l2', random_state=None, tol=0.0001, verbose=0) \{'C': 0.001\} 0.791463414634 [mean: 0.79146, std: 0.05793, params: \{'C': 0.001\}, mean: 0.79024, std: 0.05853, params: \{'C': 0.01\}, mean: 0.79024, std: 0.05853, params: \{'C': 0.1\}, mean: 0.79024, std: 0.05853, params: \{'C': 1.0\}, mean: 0.79024, std: 0.05853, params: \{'C': 10.0\}, mean: 0.79024, std: 0.05853, params: \{'C': 100.0\}]\
using reuse split\
############# based on standard predict ################\
Accuracy on training data: 0.84\
Accuracy on test data:     0.87\
[[609   0]\
 [ 94   0]]\
########################################################}